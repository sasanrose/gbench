package cmd

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/sasanrose/gbench/render"
	"github.com/sasanrose/gbench/report"
	"github.com/spf13/cobra"
)

var renderCmd = &cobra.Command{
	Use:   "render",
	Short: "Render the report generated by exec command",
	Long: `Sample usage:
gbench render (Will use all the default values)
gbench render -i ./path/to/report.json
gbench render -i ./path/to/report.json --driver html
gbench render -i ./path/to/report.json --driver html -a 0.0.0.0 -p 7777`,
	Run: func(cmd *cobra.Command, args []string) {
		file, err := os.Open(input)

		if err != nil {
			fmt.Fprintf(os.Stderr, "Could not open %s: %v.\n", input, err)
			os.Exit(2)
		}

		defer file.Close()

		if driver == "cli" {
			renderCli(file)
			return
		}
	},
}

func renderCli(file *os.File) {
	decoder := json.NewDecoder(file)
	result := &report.Result{}

	if err := decoder.Decode(result); err != nil {
		fmt.Fprintf(os.Stderr, "Invalid file %s: %v\n", input, err)
		os.Exit(2)
	}

	r := render.NewStdoutRenderer()
	r.Render(result)
}

func init() {
	rootCmd.AddCommand(renderCmd)

	initRenderFlags()
}
